% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cache.R, R/uncache.R, R/uncache_all.R
\name{cache}
\alias{cache}
\alias{cache_write}
\alias{uncache}
\alias{cache_read}
\alias{uncache_}
\alias{uncache_all}
\title{Cache and uncache an object}
\usage{
cache(object, name = deparse(substitute(object)), cache = cache_path(),
  ..., overwrite = getOption("cache.overwrite", TRUE),
  envir = parent.frame(), backend = cache_backend())

cache_write(object, name, cache = cache_path(), ...,
  overwrite = getOption("cache.overwrite", TRUE),
  envir = parent.frame(), backend = cache_backend())

uncache(name, ..., envir = parent.frame(),
  overwrite = getOption("uncache.overwrite", TRUE), reader,
  backend = cache_backend() \%>\% as_backend())

cache_read(name, cache = cache_path(), ..., reader, backend)

uncache_(...)

uncache_all(cache = getOption("cache", "cache"),
  envir = parent.frame())
}
\arguments{
\item{object}{object to cache}

\item{name}{string; name for the object defaults to the
\code{default(substitute(object))}}

\item{cache}{string; path to cache directory. The default is
\code{cache_path()}.}

\item{...}{additional arguments}

\item{overwrite}{logical; whether to overwrite if it \code{name} already exists
on the environment.}

\item{envir}{environment .. where object to cache or to where object should
be uncached. Defaults to the \code{parent.frame()}}

\item{backend}{string; (name of) the backend used.

\code{cache}/\code{cache_write} and \code{uncache}/\code{cache_read`` save and restore single objects to the }cache\code{directory.}cache(obj)\code{and}uncache(obj)` are NSE
versions that accept an unquoted name. These are mostly for interactive
use.

\code{cache_write()} and \code{cache_read()} are SE versions more suitable for
programatic.

\code{cache} attempts to ensure unique names of the saved object; saving an item
in multiple formats is not permitted.

dispatching to \code{\link[=cache_writer]{cache_writer()}} which selects the writer for the current
backend.

The \code{cache} defaults to the global option \code{\link[=cache_path]{cache_path()}} otherwise
the \code{cache} in the working directory is used. This follows the behavior
in the \emph{ProjectTemplate} package.

\code{uncache_all} restores all files in a cache directory.

\code{cache} also allows for timestamps. The default is to use the global
option \code{timestamp}. This can either be a character vector or a function
of zero arguments that returns an unary length character vector. (Only the
first value is used.)  Common practice is to use \code{Sys.Date} or
\code{Sys.time} for creating the timestamp.

The writing of files is delegated to \code{cache_write_x} functions ...}

\item{reader}{function for reading from the cache. Defaults to \code{cache_reader()}}
}
\description{
Caches or uncaches and object in a cache directory
}
\details{
\code{cache_write} is like \code{cache} but takes a name of an object and an
environment. It is mainly useful for programatic writing to the cache.
\code{cache_write} will not work unless a cache direcort has been defined. See
\code{\link[=cache_path]{cache_path()}}.

\code{uncache} restores an object from disk. It restores based on the name. It
looks in the cache

\code{cache_read()} is a functional, no side-affect version of \code{uncache}. It
reads and returns the object. Given a name, \code{\link[=cache_read]{cache_read()}} will:
\itemize{
\item read the object with the default backend/extension warning if there are
any alternate files.
\item read alternate (non-default) files with backends/extensions
\item alert and matching but unsupported files.
}
}
\examples{

  \dontrun{
     data(mtcars)
     cache(mtcars)                      # cache/mtcars.rds
     # cache( mtcars, "mycache" )           # mycache/mtcars.rds
     # cache( mtcars, "mycache", Sys.Date ) # mycache/mtcars-YYYY-MM-DD.rds

     # EXPLICIT USE OF timestamp
     # options( timestamp = Sys.Date )
     # cache( mtcars, "mycache" )          # mycache/mtcars-YYYY-MM-DD.rds

     uncache(mtcars)
     # uncache_("mtcars")

     cache_use_rds()
     cache(mtcars)
     if( exists('mtcars') ) rm(mtcars)
     uncache(mtcars)
  }

}
\seealso{
\itemize{
\item \code{\link[=cache_all]{cache_all()}} for saving all objects to the cache.
\item \code{\link[base:saveRDS]{base::saveRDS()}}
}

\itemize{
\item \code{\link[=cache_path]{cache_path()}}
}
}
