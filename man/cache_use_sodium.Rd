% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cache_use_sodium.R
\name{cache_use_sodium}
\alias{cache_use_sodium}
\alias{cache_use_aes}
\alias{cache_write_sodium}
\alias{cache_read_sodium}
\title{Cache objects using sodium (Sodium) encryption}
\usage{
cache_use_sodium(key = NULL)

cache_use_aes(...)

cache_write_sodium(object, key = getOption("cache.sodium_key",
  set_option(cache.sodium_key = readline("sodium Encryption Key? "))), ...,
  name = deparse(substitute(object)), cache = cache_find())

cache_read_sodium(name, cache = cache_find(),
  key = getOption("cache.sodium_key", set_option(cache.sodium_key =
  readline("sodium Encryption Key? "))))
}
\arguments{
\item{key}{string; sets the en/decryption key \code{cache.sodium_key}.
The default (NULL) does not set a key.}

\item{object}{object to store.}

\item{name}{string; name of object}

\item{cache}{string; path to cache directory. Defaults to \code{\link[=cache_find]{cache_find()}}}

\item{key}{string; encrypton key. Defaults to option cache.sodium_key}

\item{name}{string; name of object in the cache}

\item{cache}{string; path to cache directory. Defaults to \code{\link[=cache_find]{cache_find()}}}
}
\value{
\code{object} (In order to be pipe-able, the object must be returned)
}
\description{
Caches objects with sodium encryption using the \emph{sodium} package
}
\details{
Encrypts cached datasets using sodium256 encryption provided by the \emph{sodium}
package.

If \code{key} is provided, this is used as the encryption/decrytion key.

\code{cache_write_sodium} and \code{cache_read_sodium} are functions for
reading and writing sodium encrypted objects to/from the cache. In most cases,
\code{\link[=cache]{cache()}} and \code{\link[=uncache]{uncache()}} should be used with \code{\link[=cache_set_sodium]{cache_set_sodium()}} instead.

The extension given to sodium encrypted files is \code{sodiumrds}.

\code{cache_read_sodium} reads an AES encrypted object from the cache. \code{AES}
encrypted objects are
}
\examples{

dontrun{
 cache_use_sodium()
 cache(mtcars)
 if( exists('mtcars') ) rm(mtcars)
 uncache(mtcars)
 fs::dir_ls( cache_find() )
}

  cache_write_sodium( iris, "my key" )
  cache_read_sodium( 'iris', "my key" )

}
