% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ext.R
\name{ext}
\alias{ext}
\alias{print.ext}
\alias{as_ext}
\alias{as_ext.default}
\title{filename extension}
\usage{
ext(x = NULL)

\method{print}{ext}(x, ...)

as_ext(x, ...)

\method{as_ext}{default}(x, ...)
}
\arguments{
\item{x}{object; values to be converted to character. Character values
should omitting the leading \code{.} (period)}
}
\description{
A \strong{general} filename extensions
}
\details{
\code{\link[=ext]{ext()}} provides a object for handling file/path extensions. This is simply
a character vector available to subclass methods. This is a general filename
extension that doest not necessarily follow the \strong{fs} package notion of
an extension which takes the text after the final period of a filename or
path. The \code{ext} object does not enforce or suggest this and the extension
may include one or more \code{.} (periods).  Thus \code{tgz} and \code{tar.gz} are both
permissable extensions.

The reason for this generality is that it allows (promotes) naming schemes
that have names after the process applied to the data. For example, \code{tar.gz}
means that first the data was processed with \code{tar} and then with \code{gz}.
}
\examples{
  ext( qw(one, two, three) )

}
\seealso{
\itemize{
\item \code{\link[fs:path_ext]{fs::path_ext()}}
}
}
