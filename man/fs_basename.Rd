% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fs_basename.R
\name{fs_basename}
\alias{fs_basename}
\alias{print.fs_basename}
\alias{as_fs_basename}
\alias{as_fs_basename.default}
\alias{as_fs_basename.fs_path}
\alias{path_basename}
\title{filename/path extension object}
\usage{
fs_basename(x = NULL)

\method{print}{fs_basename}(x, ...)

as_fs_basename(x, ...)

\method{as_fs_basename}{default}(x, ...)

\method{as_fs_basename}{fs_path}(x, exts = getOption("fs.exts"))

path_basename(x, exts = getOptions("fs.exts"))
}
\arguments{
\item{x}{object; values to be converted to character. Character values
should omitting the leading \code{.} (period)}

\item{exts}{character allowable extensions}
}
\value{
a \code{\link[=fs_basename]{fs_basename()}} object.
}
\description{
A filename extension object allowing for extensions
containing \code{.}
}
\details{
\code{\link[=fs_basename]{fs_basename()}} provides a object for handling file/path extensions. This is
a character vector with a subclass \code{ext} that allows methods to be written
for it.

\code{as_fs_basename} returns the extension of its argument \code{x}.

If \code{x} is a
If \code{x} is a \emph{fs_path} object and \code{exts} is provided, x will identify
extensions will match these extensions first. This allows for extensions
with more than one \code{.} in the filename. Otherwise, \code{\link[fs:path_ext]{fs::path_ext()}} is used
and the extension is the character following the last \code{.} in the path or
filename.

Missing extensions are encoded as an empty string (\code{""}).
}
\examples{
  fs_basename( qw(one, two, three) )

  file <- "my_file.rds"
  as_fs_basename(file)

  file <- file \%>\% fs::path()
  as_fs_basename(file)
  as_fs_basename(file, c('sql', 'rds', 'sql.rds'))


  "iris.rds" \%>\%

}
\seealso{
\itemize{
\item \code{\link[=fs:path()]{fs:path()()}}
\item \code{\link[fs:path_ext]{fs::path_ext()}}
}
}
